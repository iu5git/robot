@import './spinner-variables.scss';

// идея
// https://projects.lukehaas.me/css-loaders/

/*

  4 состояния:
  + offline
  + online
  + loading
  + error
  анимационный переход между состояниями
  material. Чтобы убрать тень смотри loader-border

*/

// //////////////////////////
//    вычисляемые размеры
// //////////////////////////
/*

  видимая граница круга сделана с помощью тени
  если сделать полукруг ровно в половину окружности, при вращении фоновая тень все равно проступает,
  поэтому нужно добавить примерно 1% к радиусу полукруга, но и этого недостаточно, тень будет проступать с
  наружней части полукруга. Даже увеличив радиус до 2х процентов, эффект остается, поэтому полукруг нужно
  деформировать: 1% по высоте и 2% по ширине

  :after  |\   <- 1.2 ->    ^
          | |               |  1.1
          |/                v

  соответсвенно, введу переменную деформирования и смещения - половины деформирования.
  
  центр вращения для before и after находится в центре основания полукруга. Этого добиваюсь
  смещением top, left и transform-origin. Соответсвенно, смещение, связанное с деформацией,
  компенсируется тут.
  https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin

*/
$loader-radius: calc($loader-size / 2); 
$loader-deformation: calc($loader-size * $loader-offset-coef);  // граница, чтобы покрыть тень 2%.
$loader-offset: calc($loader-size * $loader-offset-coef / 2); 
$loader-semicircle-h: calc($loader-size + $loader-deformation);  // 101% * diameter
$loader-semicircle-w: calc($loader-radius + $loader-deformation);  // 102% * radius


@mixin loader-border($color, $width) {
  box-shadow: inset 0 0 0 $width $color,
  // 0 3px 3px 3px rgba(0, 0, 0, 0.14),
  // 0 1px 7px 0 rgba(0, 0, 0, 0.12),
}

.loader,
.loader:before,
.loader:after {
  border-radius: 50%;
  width: $loader-size;
  height: $loader-size;
  display: flex;
  align-items: center;
  justify-content: center;
}

.loader {
  @include loader-border($loader-border-color-loading, $loader-border-width);
  background-color: $loader-bkgd;
  // font-size: 11px;
  margin: calc(2 * $loader-offset) 0;
  position: relative;
  width: $loader-size;
  height: $loader-size;
  /* offset-x | offset-y | blur-radius | spread-radius | color */
  // тень внутри круга. Смещения для after и before подобраны так,
  // чтобы они вращались вокруг центра и перекрывали тень
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);

  &.online {
    @include loader-border($loader-border-color-online, $loader-border-width);
  }

  &:after, &:before {
    position: absolute;
    content: '';
    width: $loader-semicircle-w;
    height: $loader-semicircle-h;
    // width: 5.2em;  // 5 + 0.2 - 102%
    // height: 10.2em;  // 10 + 0.2 - 101%
    background: $loader-bkgd;
    transition: all 1s ease;
  }

  &:after {
    /* top-left | top-right | bottom-right | bottom-left */
    border-radius: 0 $loader-semicircle-h $loader-semicircle-h 0;  // правый полукруг / через % задать нельзя
    // top: -0.1em;
    // left: 4.9em;
    top: -$loader-offset;
    left: calc($loader-radius - $loader-offset);
    // -webkit-transform-origin: 0.1em 5.1em;  // центрирование вращения
    // transform-origin: 0.1em 5.1em;
    -webkit-transform-origin: $loader-offset calc($loader-radius + $loader-offset);  // центрирование вращения
    transform-origin: $loader-offset calc($loader-radius + $loader-offset);
    -webkit-animation: loader-spin $timing infinite;
    animation: loader-spin $timing infinite;
  }

  &:before {
    border-radius: $loader-semicircle-h 0 0 $loader-semicircle-h;  // левый полукруг
    // top: -0.1em;
    // left: -0.1em;
    top: -$loader-offset;
    left: -$loader-offset;
    // -webkit-transform-origin: 5.1em 5.1em;
    // transform-origin: 5.1em 5.1em;
    -webkit-transform-origin: calc($loader-radius + $loader-offset);
    transform-origin: calc($loader-radius + $loader-offset);
    -webkit-animation: loader-spin $timing infinite $timing-delay;
    animation: loader-spin $timing infinite $timing-delay;
  }

  &.online, &.error, &.offline {
    // online color is default
    @include loader-border($loader-border-color-online, $loader-border-width);

    &.loading {
      @include loader-border($loader-border-color-loading, $loader-border-width);
    }

    &.offline, &.error {
      @include loader-border($loader-border-color-error, $loader-border-width);
    }

    // пульсирующая анимация
    &.error {
      -webkit-animation: loader-error 2s infinite;
      animation: loader-error 2s infinite;
    }

    &:after, &:before {
      border-radius: 50%;
      transition: all 1s ease-in-out;
    }

    // певращается в круг радиусом чуть меньше исходного,
    // продолжает анимацию вращения, а не прерывает ее
    // after исчезает, before превращается в круг радиусом
    // на loader-border-width меньше чем был
    &:after {
      width: $loader-semicircle-h;  // width = height
      top: -$loader-offset;
      left: -$loader-offset;
      opacity: 0; // hide
      -webkit-transform-origin: calc($loader-radius + $loader-offset); // на центр
      transform-origin: calc($loader-radius + $loader-offset);
    }
    &:before {
      width: calc($loader-semicircle-h - calc(2 * $loader-border-width));
      height: calc($loader-semicircle-h - calc(2 * $loader-border-width));
      top: calc($loader-border-width - $loader-offset);
      left: calc($loader-border-width - $loader-offset);
      -webkit-transform-origin: calc($loader-radius - $loader-border-width + $loader-offset);
      transform-origin: calc($loader-radius - $loader-border-width + $loader-offset);
    }
  }
}

@-webkit-keyframes loader-spin {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes loader-spin {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes loader-error {
  0% {
    @include loader-border($loader-border-color-error, $loader-border-width);
  }
  50% {
    box-shadow:
      inset 0 0 $loader-border-width calc($loader-border-width * 1.1) $loader-border-color-error,
      0 0 calc(2*$loader-border-width) calc(0.1*$loader-border-width) $loader-border-color-error;
  }
  100% {
    @include loader-border($loader-border-color-error, $loader-border-width);
  }
}
